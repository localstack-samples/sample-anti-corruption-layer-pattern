name: Deploy on LocalStack 

on:
  push:
    paths-ignore:
      - 'README.md'
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    # “At 00:00 on Sunday.”
    - cron: "0 0 * * 0"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  cdk:
    name: Setup infrastructure using CDK
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: gautamkrishnar/keepalive-workflow@v1

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install CDK
        run: |
          npm install -g aws-cdk-local aws-cdk
          cdklocal --version

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0

      - name: Install AWS Lambda for .NET Core
        run: dotnet tool install -g Amazon.Lambda.Tools

      - name: Install .NET Core dependencies
        run: |
          cd user-microservice-lambda/src/UserMicroserviceLambda
          dotnet lambda package
          mkdir -p ../../../cdk-user-microservice/lambdas
          cp bin/Release/net6.0/UserMicroserviceLambda.zip ../../../cdk-user-microservice/lambdas

      - name: Start LocalStack
        env:
          DNS_ADDRESS: 0
        run: |
          pip install localstack awscli-local[ver1]
          docker pull localstack/localstack:latest
          # Start LocalStack in the background
          LS_LOG=trace localstack start -d
          # Wait 30 seconds for the LocalStack container to become ready before timing out
          echo "Waiting for LocalStack startup..."
          localstack wait -t 15
          echo "Startup complete"

      - name: Deploy infrastructure using CDK
        env:
          AWS_DEFAULT_REGION: us-east-1
          AWS_REGION: us-east-1
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
        run: |
          cd cdk-user-microservice/src/CdkUserMicroservice && dotnet build
          cd ../..
          cdklocal bootstrap
          cdklocal deploy --require-approval never

      - name: Send a Slack notification
        if: failure() || github.event_name != 'pull_request'
        uses: ravsamhq/notify-slack-action@v2
        with:
          status: ${{ job.status }}
          token: ${{ secrets.GITHUB_TOKEN }}
          notification_title: "{workflow} has {status_message}"
          message_format: "{emoji} *{workflow}* {status_message} in <{repo_url}|{repo}>"
          footer: "Linked Repo <{repo_url}|{repo}> | <{run_url}|View Workflow run>"
          notify_when: "failure"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Generate a Diagnostic Report
        if: failure()
        run: |
          curl -s localhost:4566/_localstack/diagnose | gzip -cf > diagnose.json.gz
      
      - name: Upload the Diagnostic Report
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: diagnose.json.gz
          path: ./diagnose.json.gz
